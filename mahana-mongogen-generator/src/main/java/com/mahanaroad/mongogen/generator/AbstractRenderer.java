package com.mahanaroad.mongogen.generator;


import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.time.Instant;

public abstract class AbstractRenderer {


    private final StringBuilder sourceCode = new StringBuilder();


    public final void renderToDir(final File outputDir) {

        final String renderedSource = renderSource();
        final File sourceFile = createSourceFile(outputDir);
        writeSourceToFile(renderedSource, sourceFile);

    }


    private File createSourceFile(final File outputDir) {

        final String filePath = createFilePath();
        final File sourceFile = new File(outputDir, filePath);

        if (sourceFile.exists() == false) {

            final File parentDir = sourceFile.getParentFile();

            if (parentDir.exists() == false) {

                final boolean mkdirsSucceeded = parentDir.mkdirs();

                if (mkdirsSucceeded == false) {
                    throw new RuntimeException("Unable to create parent directory for an unknown reason. [" + parentDir + "]");
                }

            }

        }

        return sourceFile;

    }


    protected abstract String createFilePath();


    private void writeSourceToFile(final String source, final File sourceFile) {

        try (final PrintWriter writer = new PrintWriter(sourceFile)) {

            writer.write(source);

        } catch (IOException e) {
            throw new RuntimeException("Error writing source to file", e);
        }

    }


    protected abstract String renderSource();


    protected final void renderGeneratedCodeStatement() {

        appendLine("// This source was generated by the Mahana Mongogen generator");
        appendLine("// Renderer class: " + getClass());
        appendLine("// Rendered at: " + Instant.now());

    }


    protected final String getSourceCode() {

        return this.sourceCode.toString();

    }


    protected final void append(final String text) {

        this.sourceCode.append(text);

    }


    protected final void append(final String text, Object... args) {

        this.sourceCode.append(String.format(text, args));

    }


    protected final void appendLine(final String text) {

        append(text);
        newLine();

    }


    protected final void appendLine(final String text, final Object... args) {

        append(String.format(text, args));
        newLine();

    }


    protected final void blankLine() {

        newLine();

    }


    protected final void newLine() {

        append("\n");

    }



}
