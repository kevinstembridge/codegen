// This source was generated by the Mahana Mongogen generator
// Renderer class: class com.mahanaroad.mongogen.generator.entities.DaoRenderer
// Rendered at: 2016-09-30T22:30:59.404Z

package com.mahanaroad.mongogen.sample.fieldconverters;

import com.mahanaroad.mongogen.persist.AbstractEntityDao;
import com.mahanaroad.mongogen.persist.MongoClientFacade;
import com.mahanaroad.mongogen.types.CollectionName;
import java.time.Instant;
import java.util.Date;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import org.bson.Document;
import org.bson.conversions.Bson;
import org.bson.types.ObjectId;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Repository;


@Repository
public class FieldConversionDao extends AbstractEntityDao<FieldConversionEntity> {

    private final FieldConversionEntityFieldConverter fieldConverter = new FieldConversionEntityFieldConverter() {

        @Override
        public Object convert(final String collectionFieldName, final Object inputValue) {

            switch(collectionFieldName) {

                case "c-ts":
                    return Date.from((Instant) inputValue);
                case "_id":
                    return inputValue;
                case "lm-ts":
                    return Date.from((Instant) inputValue);
                case "fl":
                    return someStringWithFieldLevelReader_fl_FieldWriter.writeField((String) inputValue);
                case "ft":
                    return someStringWithFieldTypeLevelReader_ft_FieldWriter.writeField((String) inputValue);
                 default:
                     throw new RuntimeException("Unknown collectionFieldName [" + collectionFieldName + "]");
            }

        }

    };


    private final MongoClientFacade mongoClientFacade;

    private final FieldConverterTestFieldLevelFieldReader someStringWithFieldLevelReader_fl_FieldReader;

    private final FieldConverterTestFieldLevelFieldWriter someStringWithFieldLevelReader_fl_FieldWriter;

    private final FieldConverterTestFieldTypeLevelFieldReader someStringWithFieldTypeLevelReader_ft_FieldReader;

    private final FieldConverterTestFieldTypeLevelFieldWriter someStringWithFieldTypeLevelReader_ft_FieldWriter;


    @Autowired
    public FieldConversionDao(
            final MongoClientFacade mongoClientFacade,
            final FieldConverterTestFieldLevelFieldReader someStringWithFieldLevelReader_fl_FieldReader,
            final FieldConverterTestFieldLevelFieldWriter someStringWithFieldLevelReader_fl_FieldWriter,
            final FieldConverterTestFieldTypeLevelFieldReader someStringWithFieldTypeLevelReader_ft_FieldReader,
            final FieldConverterTestFieldTypeLevelFieldWriter someStringWithFieldTypeLevelReader_ft_FieldWriter) {

        super(new CollectionName("fieldConversion"), mongoClientFacade);

        Objects.requireNonNull(mongoClientFacade, "mongoClientFacade");
        Objects.requireNonNull(someStringWithFieldLevelReader_fl_FieldReader, "someStringWithFieldLevelReader_fl_FieldReader");
        Objects.requireNonNull(someStringWithFieldLevelReader_fl_FieldWriter, "someStringWithFieldLevelReader_fl_FieldWriter");
        Objects.requireNonNull(someStringWithFieldTypeLevelReader_ft_FieldReader, "someStringWithFieldTypeLevelReader_ft_FieldReader");
        Objects.requireNonNull(someStringWithFieldTypeLevelReader_ft_FieldWriter, "someStringWithFieldTypeLevelReader_ft_FieldWriter");

        this.mongoClientFacade = mongoClientFacade;
        this.someStringWithFieldLevelReader_fl_FieldReader = someStringWithFieldLevelReader_fl_FieldReader;
        this.someStringWithFieldLevelReader_fl_FieldWriter = someStringWithFieldLevelReader_fl_FieldWriter;
        this.someStringWithFieldTypeLevelReader_ft_FieldReader = someStringWithFieldTypeLevelReader_ft_FieldReader;
        this.someStringWithFieldTypeLevelReader_ft_FieldWriter = someStringWithFieldTypeLevelReader_ft_FieldWriter;

    }


    @Override
    protected Document toDocumentFrom(final FieldConversionEntity entity) {

        final Document document = new Document();

        document.put("c-ts", Date.from(entity.getCreatedTimestampUtc()));
        document.put("_id", entity.getId());
        entity.getLastModifiedTimestampUtc().ifPresent(lastModifiedTimestampUtc -> document.put("lm-ts", Date.from(lastModifiedTimestampUtc)));
        document.put("fl", this.someStringWithFieldLevelReader_fl_FieldWriter.writeField(entity.getSomeStringWithFieldLevelReader()));
        document.put("ft", this.someStringWithFieldTypeLevelReader_ft_FieldWriter.writeField(entity.getSomeStringWithFieldTypeLevelReader()));

        return document;

    }


    @Override
    protected Document toUpsertDocumentFrom(final FieldConversionEntity entity) {

        final Document modifiableFieldsDocument = new Document();
        final Document unmodifiableFieldsDocument = new Document();

        unmodifiableFieldsDocument.put("c-ts", Date.from(entity.getCreatedTimestampUtc()));
        unmodifiableFieldsDocument.put("_id", entity.getId());
        entity.getLastModifiedTimestampUtc().ifPresent(lastModifiedTimestampUtc -> unmodifiableFieldsDocument.put("lm-ts", Date.from(lastModifiedTimestampUtc)));
        unmodifiableFieldsDocument.put("fl", this.someStringWithFieldLevelReader_fl_FieldWriter.writeField(entity.getSomeStringWithFieldLevelReader()));
        unmodifiableFieldsDocument.put("ft", this.someStringWithFieldTypeLevelReader_ft_FieldWriter.writeField(entity.getSomeStringWithFieldTypeLevelReader()));

        return new Document()
                .append("$setOnInsert", unmodifiableFieldsDocument)
                .append("$set", modifiableFieldsDocument);

    }


    @Override
    protected FieldConversionEntity toEntityFrom(final Document document) {

        final Instant createdTimestampUtc = readInstant("c-ts", "createdTimestampUtc", document);
        final ObjectId id = readObjectId("_id", "id", document);
        final Optional<Instant> lastModifiedTimestampUtc = readInstantOptional("lm-ts", document);
        final String someStringWithFieldLevelReader = this.someStringWithFieldLevelReader_fl_FieldReader.readField("fl", "someStringWithFieldLevelReader", document, getCollectionName());
        final String someStringWithFieldTypeLevelReader = this.someStringWithFieldTypeLevelReader_ft_FieldReader.readField("ft", "someStringWithFieldTypeLevelReader", document, getCollectionName());

        return new FieldConversionEntity(
                createdTimestampUtc,
                id,
                lastModifiedTimestampUtc,
                someStringWithFieldLevelReader,
                someStringWithFieldTypeLevelReader);

    }


    public long count(final FieldConversionEntityFilter filter) {

        final Bson bsonFilter = filter.toBson(this.fieldConverter);
        return super.count(bsonFilter);

    }


    public List<FieldConversionEntity> findAllBy(final FieldConversionEntityFilter filter) {

        final Bson bsonFilter = filter.toBson(this.fieldConverter);
        return super.find(bsonFilter);

    }


    public Page<FieldConversionEntity> findAll(final Pageable pageable) {

        return super.find(pageable);

    }


    public Page<FieldConversionEntity> findAllBy(final FieldConversionEntityFilter filter, final Pageable pageable) {

        final Bson bsonFilter = filter.toBson(this.fieldConverter);
        return super.find(bsonFilter, pageable);

    }


    public void setFields(final FieldConversionEntityUpdater updater) {

        final Bson bson = updater.toBson(this.fieldConverter);
        super.updateOneById(updater.getId(), bson);

    }


    protected final String convertClassFieldNameToCollectionFieldName(final String classFieldName) {

        switch(classFieldName) {
            case "createdTimestampUtc":
                return "c-ts";
            case "id":
                return "_id";
            case "lastModifiedTimestampUtc":
                return "lm-ts";
            case "someStringWithFieldLevelReader":
                return "fl";
            case "someStringWithFieldTypeLevelReader":
                return "ft";
            default:
                throw new IllegalArgumentException("Unknown classFieldName [" + classFieldName + "]");
        }

    }


    protected final Optional<String> getTypeDiscriminator() {

        return Optional.empty();

    }


}
