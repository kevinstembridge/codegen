// This source was generated by the Mahana Mongogen generator
// Renderer class: class com.mahanaroad.mongogen.generator.entities.EntityFiltersRenderer
// Rendered at: 2016-09-30T22:30:59.718Z

package com.mahanaroad.mongogen.sample.simple;

import com.mahanaroad.mongogen.BlankStringException;
import com.mahanaroad.mongogen.sample.types.SomeBooleanType;
import com.mahanaroad.mongogen.sample.types.SomeIntType;
import com.mahanaroad.mongogen.sample.types.SomeLongType;
import com.mahanaroad.mongogen.sample.types.SomeProvidedBooleanType;
import com.mahanaroad.mongogen.sample.types.SomeProvidedIntType;
import com.mahanaroad.mongogen.sample.types.SomeProvidedLongType;
import com.mahanaroad.mongogen.sample.types.SomeProvidedStringType;
import com.mahanaroad.mongogen.sample.types.SomeStringType;
import com.mongodb.client.model.Filters;;
import java.time.Instant;
import java.time.LocalDate;
import java.time.Period;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.OptionalInt;
import java.util.function.Function;
import java.util.function.Supplier;
import java.util.stream.Collectors;
import org.bson.conversions.Bson;
import org.bson.types.ObjectId;


public class SimpleEntityFilters {


    public static SimpleEntityFilter and(final SimpleEntityFilter... filters) {

        return new IterableFunctionFilter(Arrays.asList(filters), Filters::and);

    }


    public static SimpleEntityFilter or(final SimpleEntityFilter... filters) {

        return new IterableFunctionFilter(Arrays.asList(filters), Filters::or);

    }


    public static SimpleEntityFilter nor(final SimpleEntityFilter... filters) {

        return new IterableFunctionFilter(Arrays.asList(filters), Filters::nor);

    }


    public static FieldFilter<Instant> createdTimestampUtc() {

        return new FieldFilter<>("c-ts");

    }


    public static FieldFilter<ObjectId> id() {

        return new FieldFilter<>("_id");

    }


    public static FieldFilter<Optional<Instant>> lastModifiedTimestampUtc() {

        return new FieldFilter<>("lm-ts");

    }


    public static FieldFilter<Boolean> someBoolean() {

        return new FieldFilter<>("sb");

    }


    public static FieldFilter<SomeBooleanType> someBooleanType() {

        return new FieldFilter<>("sbt");

    }


    public static FieldFilter<SomeIntType> someIntType() {

        return new FieldFilter<>("sit");

    }


    public static FieldFilter<List<SomeStatus>> someListOfEnums() {

        return new FieldFilter<>("lostat");

    }


    public static FieldFilter<List<Instant>> someListOfInstants() {

        return new FieldFilter<>("loi");

    }


    public static FieldFilter<List<LocalDate>> someListOfLocalDates() {

        return new FieldFilter<>("lold");

    }


    public static FieldFilter<List<Period>> someListOfPeriods() {

        return new FieldFilter<>("lop");

    }


    public static FieldFilter<List<SomeStringType>> someListOfStringTypes() {

        return new FieldFilter<>("lost");

    }


    public static FieldFilter<List<String>> someListOfStrings() {

        return new FieldFilter<>("los");

    }


    public static FieldFilter<SomeLongType> someLongType() {

        return new FieldFilter<>("slt");

    }


    public static FieldFilter<Map<String, Integer>> someMapOfStringToInteger() {

        return new FieldFilter<>("mosti");

    }


    public static FieldFilter<Map<SomeStringType, SomeStringType>> someMapOfStringTypeToStringType() {

        return new FieldFilter<>("mosttst");

    }


    public static FieldFilter<Instant> someModifiableInstant() {

        return new FieldFilter<>("smi");

    }


    public static FieldFilter<Integer> someModifiableInt() {

        return new FieldFilter<>("smint");

    }


    public static FieldFilter<LocalDate> someModifiableLocalDate() {

        return new FieldFilter<>("smld");

    }


    public static FieldFilter<Period> someModifiablePeriod() {

        return new FieldFilter<>("smp");

    }


    public static FieldFilter<String> someModifiableString() {

        return new FieldFilter<>("sms");

    }


    public static FieldFilter<String> someNonNullableString() {

        return new FieldFilter<>("snns");

    }


    public static FieldFilter<Optional<Boolean>> someOptionalBoolean() {

        return new FieldFilter<>("sob");

    }


    public static FieldFilter<Optional<SomeBooleanType>> someOptionalBooleanType() {

        return new FieldFilter<>("sobtyp");

    }


    public static FieldFilter<Optional<Instant>> someOptionalInstant() {

        return new FieldFilter<>("soi");

    }


    public static FieldFilter<OptionalInt> someOptionalInt() {

        return new FieldFilter<>("soint");

    }


    public static FieldFilter<Optional<SomeIntType>> someOptionalIntType() {

        return new FieldFilter<>("soityp");

    }


    public static FieldFilter<Optional<SomeLongType>> someOptionalLongType() {

        return new FieldFilter<>("soltyp");

    }


    public static FieldFilter<Optional<Instant>> someOptionalModifiableInstant() {

        return new FieldFilter<>("somi");

    }


    public static FieldFilter<Optional<Period>> someOptionalPeriod() {

        return new FieldFilter<>("sop");

    }


    public static FieldFilter<Optional<SomeProvidedBooleanType>> someOptionalProvidedBooleanType() {

        return new FieldFilter<>("sopbtyp");

    }


    public static FieldFilter<Optional<SomeProvidedIntType>> someOptionalProvidedIntType() {

        return new FieldFilter<>("sopityp");

    }


    public static FieldFilter<Optional<SomeProvidedLongType>> someOptionalProvidedLongType() {

        return new FieldFilter<>("sopltyp");

    }


    public static FieldFilter<Optional<SomeProvidedStringType>> someOptionalProvidedStringType() {

        return new FieldFilter<>("sopstyp");

    }


    public static FieldFilter<Optional<SomeStatus>> someOptionalStatus() {

        return new FieldFilter<>("sost");

    }


    public static FieldFilter<Optional<String>> someOptionalString() {

        return new FieldFilter<>("sos");

    }


    public static FieldFilter<Optional<SomeStringType>> someOptionalStringType() {

        return new FieldFilter<>("sostyp");

    }


    public static FieldFilter<SomeProvidedBooleanType> someProvidedBooleanType() {

        return new FieldFilter<>("spbt");

    }


    public static FieldFilter<SomeProvidedIntType> someProvidedIntType() {

        return new FieldFilter<>("spit");

    }


    public static FieldFilter<SomeProvidedLongType> someProvidedLongType() {

        return new FieldFilter<>("splt");

    }


    public static FieldFilter<SomeProvidedStringType> someProvidedStringType() {

        return new FieldFilter<>("spst");

    }


    public static FieldFilter<SomeStatus> someStatus() {

        return new FieldFilter<>("ss");

    }


    public static FieldFilter<SomeStringType> someStringType() {

        return new FieldFilter<>("sst");

    }



    private SimpleEntityFilters() {

    }


    public static class FieldFilter<T> {


        private final String collectionFieldName;


        private FieldFilter(final String collectionFieldName) {

            this.collectionFieldName = BlankStringException.throwIfBlank(collectionFieldName, "collectionFieldName");

        }


        public SimpleEntityFilter eq(final T value) {

            return new SimpleFunctionFilter<>(this.collectionFieldName, value, convertedValue -> Filters.eq(this.collectionFieldName, convertedValue));

        }


        public SimpleEntityFilter gt(final T value) {

            return new SimpleFunctionFilter<>(this.collectionFieldName, value, convertedValue -> Filters.gt(this.collectionFieldName, convertedValue));

        }


        public SimpleEntityFilter gte(final T value) {

            return new SimpleFunctionFilter<>(this.collectionFieldName, value, convertedValue -> Filters.gte(this.collectionFieldName, convertedValue));

        }


        public SimpleEntityFilter lt(final T value) {

            return new SimpleFunctionFilter<>(this.collectionFieldName, value, convertedValue -> Filters.lt(this.collectionFieldName, convertedValue));

        }


        public SimpleEntityFilter lte(final T value) {

            return new SimpleFunctionFilter<>(this.collectionFieldName, value, convertedValue -> Filters.lte(this.collectionFieldName, convertedValue));

        }


        public SimpleEntityFilter ne(final T value) {

            return new SimpleFunctionFilter<>(this.collectionFieldName, value, convertedValue -> Filters.ne(this.collectionFieldName, convertedValue));

        }


        public SimpleEntityFilter exists() {

            return new SimpleSupplierFilter(() -> Filters.exists(this.collectionFieldName));

        }


    }


    private static class SimpleSupplierFilter implements SimpleEntityFilter {

        private final Supplier<Bson> supplier;


        private SimpleSupplierFilter(final Supplier<Bson> supplier) {

            this.supplier = supplier;

        }


        @Override
        public Bson toBson(final SimpleEntityFieldConverter fieldConverter) {

            return this.supplier.get();

        }


    }


    private static class SimpleFunctionFilter<VALUE> implements SimpleEntityFilter {

        private final String fieldName;
        private final VALUE value;
        private final Function<Object, Bson> bsonFunction;


        private SimpleFunctionFilter(final String fieldName, final VALUE value, final Function<Object, Bson> bsonFunction) {

            this.fieldName = BlankStringException.throwIfBlank(fieldName, "fieldName");
            this.value = value;
            this.bsonFunction = bsonFunction;

        }


        @Override
        public Bson toBson(final SimpleEntityFieldConverter fieldConverter) {

            final Object convertedValue = fieldConverter.convert(this.fieldName, this.value);
            return this.bsonFunction.apply(convertedValue);

        }


    }


    private static class IterableFunctionFilter implements SimpleEntityFilter {

        private final Function<List<Bson>, Bson> bsonFunction;
        private final List<SimpleEntityFilter> filters;


        private IterableFunctionFilter(final List<SimpleEntityFilter> filters, final Function<List<Bson>, Bson> bsonFunction) {

            this.filters = filters;
            this.bsonFunction = bsonFunction;

        }


        @Override
        public Bson toBson(final SimpleEntityFieldConverter fieldConverter) {

            final List<Bson> bsons = this.filters.stream().map(filter -> filter.toBson(fieldConverter)).collect(Collectors.toList());
            return this.bsonFunction.apply(bsons);

        }


    }


}
