// This source was generated by the Mahana Mongogen generator
// Renderer class: class com.mahanaroad.mongogen.generator.entities.EntityFiltersRenderer
// Rendered at: 2016-09-30T22:30:59.766Z

package com.mahanaroad.mongogen.sample.person;

import com.mahanaroad.mongogen.BlankStringException;
import com.mahanaroad.mongogen.sample.types.FirstName;
import com.mahanaroad.mongogen.sample.types.LastName;
import com.mongodb.client.model.Filters;;
import java.time.Instant;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import java.util.function.Function;
import java.util.function.Supplier;
import java.util.stream.Collectors;
import org.bson.conversions.Bson;
import org.bson.types.ObjectId;


public class PersonEntityFilters {


    public static PersonEntityFilter and(final PersonEntityFilter... filters) {

        return new IterableFunctionFilter(Arrays.asList(filters), Filters::and);

    }


    public static PersonEntityFilter or(final PersonEntityFilter... filters) {

        return new IterableFunctionFilter(Arrays.asList(filters), Filters::or);

    }


    public static PersonEntityFilter nor(final PersonEntityFilter... filters) {

        return new IterableFunctionFilter(Arrays.asList(filters), Filters::nor);

    }


    public static FieldFilter<Instant> createdTimestampUtc() {

        return new FieldFilter<>("c-ts");

    }


    public static FieldFilter<FirstName> firstName() {

        return new FieldFilter<>("fn");

    }


    public static FieldFilter<ObjectId> id() {

        return new FieldFilter<>("_id");

    }


    public static FieldFilter<Optional<Instant>> lastModifiedTimestampUtc() {

        return new FieldFilter<>("lm-ts");

    }


    public static FieldFilter<LastName> lastName() {

        return new FieldFilter<>("ln");

    }



    private PersonEntityFilters() {

    }


    public static class FieldFilter<T> {


        private final String collectionFieldName;


        private FieldFilter(final String collectionFieldName) {

            this.collectionFieldName = BlankStringException.throwIfBlank(collectionFieldName, "collectionFieldName");

        }


        public PersonEntityFilter eq(final T value) {

            return new SimpleFunctionFilter<>(this.collectionFieldName, value, convertedValue -> Filters.eq(this.collectionFieldName, convertedValue));

        }


        public PersonEntityFilter gt(final T value) {

            return new SimpleFunctionFilter<>(this.collectionFieldName, value, convertedValue -> Filters.gt(this.collectionFieldName, convertedValue));

        }


        public PersonEntityFilter gte(final T value) {

            return new SimpleFunctionFilter<>(this.collectionFieldName, value, convertedValue -> Filters.gte(this.collectionFieldName, convertedValue));

        }


        public PersonEntityFilter lt(final T value) {

            return new SimpleFunctionFilter<>(this.collectionFieldName, value, convertedValue -> Filters.lt(this.collectionFieldName, convertedValue));

        }


        public PersonEntityFilter lte(final T value) {

            return new SimpleFunctionFilter<>(this.collectionFieldName, value, convertedValue -> Filters.lte(this.collectionFieldName, convertedValue));

        }


        public PersonEntityFilter ne(final T value) {

            return new SimpleFunctionFilter<>(this.collectionFieldName, value, convertedValue -> Filters.ne(this.collectionFieldName, convertedValue));

        }


        public PersonEntityFilter exists() {

            return new SimpleSupplierFilter(() -> Filters.exists(this.collectionFieldName));

        }


    }


    private static class SimpleSupplierFilter implements PersonEntityFilter {

        private final Supplier<Bson> supplier;


        private SimpleSupplierFilter(final Supplier<Bson> supplier) {

            this.supplier = supplier;

        }


        @Override
        public Bson toBson(final PersonEntityFieldConverter fieldConverter) {

            return this.supplier.get();

        }


    }


    private static class SimpleFunctionFilter<VALUE> implements PersonEntityFilter {

        private final String fieldName;
        private final VALUE value;
        private final Function<Object, Bson> bsonFunction;


        private SimpleFunctionFilter(final String fieldName, final VALUE value, final Function<Object, Bson> bsonFunction) {

            this.fieldName = BlankStringException.throwIfBlank(fieldName, "fieldName");
            this.value = value;
            this.bsonFunction = bsonFunction;

        }


        @Override
        public Bson toBson(final PersonEntityFieldConverter fieldConverter) {

            final Object convertedValue = fieldConverter.convert(this.fieldName, this.value);
            return this.bsonFunction.apply(convertedValue);

        }


    }


    private static class IterableFunctionFilter implements PersonEntityFilter {

        private final Function<List<Bson>, Bson> bsonFunction;
        private final List<PersonEntityFilter> filters;


        private IterableFunctionFilter(final List<PersonEntityFilter> filters, final Function<List<Bson>, Bson> bsonFunction) {

            this.filters = filters;
            this.bsonFunction = bsonFunction;

        }


        @Override
        public Bson toBson(final PersonEntityFieldConverter fieldConverter) {

            final List<Bson> bsons = this.filters.stream().map(filter -> filter.toBson(fieldConverter)).collect(Collectors.toList());
            return this.bsonFunction.apply(bsons);

        }


    }


}
