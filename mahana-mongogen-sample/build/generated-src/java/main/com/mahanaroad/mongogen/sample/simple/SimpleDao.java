// This source was generated by the Mahana Mongogen generator
// Renderer class: class com.mahanaroad.mongogen.generator.entities.DaoRenderer
// Rendered at: 2016-09-30T22:30:59.728Z

package com.mahanaroad.mongogen.sample.simple;

import com.mahanaroad.mongogen.persist.AbstractEntityDao;
import com.mahanaroad.mongogen.persist.MongoClientFacade;
import com.mahanaroad.mongogen.sample.types.SomeBooleanType;
import com.mahanaroad.mongogen.sample.types.SomeIntType;
import com.mahanaroad.mongogen.sample.types.SomeLongType;
import com.mahanaroad.mongogen.sample.types.SomeProvidedBooleanType;
import com.mahanaroad.mongogen.sample.types.SomeProvidedIntType;
import com.mahanaroad.mongogen.sample.types.SomeProvidedLongType;
import com.mahanaroad.mongogen.sample.types.SomeProvidedStringType;
import com.mahanaroad.mongogen.sample.types.SomeStringType;
import com.mahanaroad.mongogen.types.CollectionName;
import com.mongodb.client.model.FindOneAndUpdateOptions;
import com.mongodb.client.model.ReturnDocument;
import java.time.Instant;
import java.time.LocalDate;
import java.time.Period;
import java.time.ZoneId;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.OptionalInt;
import java.util.stream.Collectors;
import org.bson.Document;
import org.bson.conversions.Bson;
import org.bson.types.ObjectId;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Repository;


@Repository
public class SimpleDao extends AbstractEntityDao<SimpleEntity> {

    private final SimpleEntityFieldConverter fieldConverter = new SimpleEntityFieldConverter() {

        @Override
        public Object convert(final String collectionFieldName, final Object inputValue) {

            switch(collectionFieldName) {

                case "c-ts":
                    return Date.from((Instant) inputValue);
                case "_id":
                    return inputValue;
                case "lm-ts":
                    return Date.from((Instant) inputValue);
                case "sb":
                    return inputValue;
                case "sbt":
                    return ((SomeBooleanType) inputValue).getValue();
                case "sit":
                    return ((SomeIntType) inputValue).getValue();
                case "lostat":
                    return ((List<SomeStatus>) inputValue).stream().map(SomeStatus::name).collect(Collectors.toList());
                case "loi":
                    return ((List<Instant>) inputValue).stream().map(Date::from).collect(Collectors.toList());
                case "lold":
                    return ((List<LocalDate>) inputValue).stream().map(ld -> Date.from(ld.atStartOfDay(ZoneId.of("UTC")).toInstant())).collect(Collectors.toList());
                case "lop":
                    return ((List<Period>) inputValue).stream().map(Period::toString).collect(Collectors.toList());
                case "lost":
                    return ((List<SomeStringType>) inputValue).stream().map(SomeStringType::getValue).collect(Collectors.toList());
                case "los":
                    return inputValue;
                case "slt":
                    return ((SomeLongType) inputValue).getValue();
                case "mosti":
                    return inputValue;
                case "mosttst":
                    return inputValue;
                case "smi":
                    return Date.from((Instant) inputValue);
                case "smint":
                    return inputValue;
                case "smld":
                    return Date.from(((LocalDate) inputValue).atStartOfDay(ZoneId.of("UTC")).toInstant());
                case "smp":
                    return inputValue.toString();
                case "sms":
                    return inputValue;
                case "snns":
                    return inputValue;
                case "sob":
                    return inputValue;
                case "sobtyp":
                    return ((SomeBooleanType) inputValue).getValue();
                case "soi":
                    return Date.from((Instant) inputValue);
                case "soint":
                    return inputValue;
                case "soityp":
                    return ((SomeIntType) inputValue).getValue();
                case "soltyp":
                    return ((SomeLongType) inputValue).getValue();
                case "somi":
                    return Date.from((Instant) inputValue);
                case "sop":
                    return inputValue.toString();
                case "sopbtyp":
                    return ((SomeProvidedBooleanType) inputValue).getValue();
                case "sopityp":
                    return ((SomeProvidedIntType) inputValue).getValue();
                case "sopltyp":
                    return ((SomeProvidedLongType) inputValue).getValue();
                case "sopstyp":
                    return ((SomeProvidedStringType) inputValue).getValue();
                case "sost":
                    return ((SomeStatus) inputValue).name();
                case "sos":
                    return inputValue;
                case "sostyp":
                    return ((SomeStringType) inputValue).getValue();
                case "spbt":
                    return ((SomeProvidedBooleanType) inputValue).getValue();
                case "spit":
                    return ((SomeProvidedIntType) inputValue).getValue();
                case "splt":
                    return ((SomeProvidedLongType) inputValue).getValue();
                case "spst":
                    return ((SomeProvidedStringType) inputValue).getValue();
                case "ss":
                    return ((SomeStatus) inputValue).name();
                case "sst":
                    return ((SomeStringType) inputValue).getValue();
                 default:
                     throw new RuntimeException("Unknown collectionFieldName [" + collectionFieldName + "]");
            }

        }

    };


    private final MongoClientFacade mongoClientFacade;


    @Autowired
    public SimpleDao(final MongoClientFacade mongoClientFacade) {

        super(new CollectionName("simple"), mongoClientFacade);

        Objects.requireNonNull(mongoClientFacade, "mongoClientFacade");

        this.mongoClientFacade = mongoClientFacade;

    }


    @Override
    protected Document toDocumentFrom(final SimpleEntity entity) {

        final Document document = new Document();

        document.put("c-ts", Date.from(entity.getCreatedTimestampUtc()));
        document.put("_id", entity.getId());
        entity.getLastModifiedTimestampUtc().ifPresent(lastModifiedTimestampUtc -> document.put("lm-ts", Date.from(lastModifiedTimestampUtc)));
        document.put("sb", entity.getSomeBoolean());
        document.put("sbt", entity.getSomeBooleanType().getValue());
        document.put("sit", entity.getSomeIntType().getValue());
        document.put("lostat", entity.getSomeListOfEnums().stream().map(SomeStatus::name).collect(Collectors.toList()));
        document.put("loi", entity.getSomeListOfInstants().stream().map(Date::from).collect(Collectors.toList()));
        document.put("lold", entity.getSomeListOfLocalDates().stream().map(ld -> Date.from(ld.atStartOfDay(ZoneId.of("UTC")).toInstant())).collect(Collectors.toList()));
        document.put("lop", entity.getSomeListOfPeriods().stream().map(Period::toString).collect(Collectors.toList()));
        document.put("lost", entity.getSomeListOfStringTypes().stream().map(SomeStringType::getValue).collect(Collectors.toList()));
        document.put("los", entity.getSomeListOfStrings());
        document.put("slt", entity.getSomeLongType().getValue());
        document.put("mosti", entity.getSomeMapOfStringToInteger());
        document.put("mosttst", entity.getSomeMapOfStringTypeToStringType());
        document.put("smi", Date.from(entity.getSomeModifiableInstant()));
        document.put("smint", entity.getSomeModifiableInt());
        document.put("smld", Date.from(entity.getSomeModifiableLocalDate().atStartOfDay(ZoneId.of("UTC")).toInstant()));
        document.put("smp", entity.getSomeModifiablePeriod().toString());
        document.put("sms", entity.getSomeModifiableString());
        document.put("snns", entity.getSomeNonNullableString());
        entity.getSomeOptionalBoolean().ifPresent(someOptionalBoolean -> document.put("sob", someOptionalBoolean));
        entity.getSomeOptionalBooleanType().ifPresent(someOptionalBooleanType -> document.put("sobtyp", someOptionalBooleanType.getValue()));
        entity.getSomeOptionalInstant().ifPresent(someOptionalInstant -> document.put("soi", Date.from(someOptionalInstant)));
        entity.getSomeOptionalInt().ifPresent(someOptionalInt -> document.put("soint", someOptionalInt));
        entity.getSomeOptionalIntType().ifPresent(someOptionalIntType -> document.put("soityp", someOptionalIntType.getValue()));
        entity.getSomeOptionalLongType().ifPresent(someOptionalLongType -> document.put("soltyp", someOptionalLongType.getValue()));
        entity.getSomeOptionalModifiableInstant().ifPresent(someOptionalModifiableInstant -> document.put("somi", Date.from(someOptionalModifiableInstant)));
        entity.getSomeOptionalPeriod().ifPresent(someOptionalPeriod -> document.put("sop", someOptionalPeriod.toString()));
        entity.getSomeOptionalProvidedBooleanType().ifPresent(someOptionalProvidedBooleanType -> document.put("sopbtyp", someOptionalProvidedBooleanType.getValue()));
        entity.getSomeOptionalProvidedIntType().ifPresent(someOptionalProvidedIntType -> document.put("sopityp", someOptionalProvidedIntType.getValue()));
        entity.getSomeOptionalProvidedLongType().ifPresent(someOptionalProvidedLongType -> document.put("sopltyp", someOptionalProvidedLongType.getValue()));
        entity.getSomeOptionalProvidedStringType().ifPresent(someOptionalProvidedStringType -> document.put("sopstyp", someOptionalProvidedStringType.getValue()));
        entity.getSomeOptionalStatus().ifPresent(someOptionalStatus -> document.put("sost", someOptionalStatus.name()));
        entity.getSomeOptionalString().ifPresent(someOptionalString -> document.put("sos", someOptionalString));
        entity.getSomeOptionalStringType().ifPresent(someOptionalStringType -> document.put("sostyp", someOptionalStringType.getValue()));
        document.put("spbt", entity.getSomeProvidedBooleanType().getValue());
        document.put("spit", entity.getSomeProvidedIntType().getValue());
        document.put("splt", entity.getSomeProvidedLongType().getValue());
        document.put("spst", entity.getSomeProvidedStringType().getValue());
        document.put("ss", entity.getSomeStatus().name());
        document.put("sst", entity.getSomeStringType().getValue());

        return document;

    }


    @Override
    protected Document toUpsertDocumentFrom(final SimpleEntity entity) {

        final Document modifiableFieldsDocument = new Document();
        final Document unmodifiableFieldsDocument = new Document();

        modifiableFieldsDocument.put("smi", Date.from(entity.getSomeModifiableInstant()));
        modifiableFieldsDocument.put("smint", entity.getSomeModifiableInt());
        modifiableFieldsDocument.put("smld", Date.from(entity.getSomeModifiableLocalDate().atStartOfDay(ZoneId.of("UTC")).toInstant()));
        modifiableFieldsDocument.put("smp", entity.getSomeModifiablePeriod().toString());
        modifiableFieldsDocument.put("sms", entity.getSomeModifiableString());
        entity.getSomeOptionalInt().ifPresent(someOptionalInt -> modifiableFieldsDocument.put("soint", someOptionalInt));
        entity.getSomeOptionalModifiableInstant().ifPresent(someOptionalModifiableInstant -> modifiableFieldsDocument.put("somi", Date.from(someOptionalModifiableInstant)));
        unmodifiableFieldsDocument.put("c-ts", Date.from(entity.getCreatedTimestampUtc()));
        unmodifiableFieldsDocument.put("_id", entity.getId());
        entity.getLastModifiedTimestampUtc().ifPresent(lastModifiedTimestampUtc -> unmodifiableFieldsDocument.put("lm-ts", Date.from(lastModifiedTimestampUtc)));
        unmodifiableFieldsDocument.put("sb", entity.getSomeBoolean());
        unmodifiableFieldsDocument.put("sbt", entity.getSomeBooleanType().getValue());
        unmodifiableFieldsDocument.put("sit", entity.getSomeIntType().getValue());
        unmodifiableFieldsDocument.put("lostat", entity.getSomeListOfEnums().stream().map(SomeStatus::name).collect(Collectors.toList()));
        unmodifiableFieldsDocument.put("loi", entity.getSomeListOfInstants().stream().map(Date::from).collect(Collectors.toList()));
        unmodifiableFieldsDocument.put("lold", entity.getSomeListOfLocalDates().stream().map(ld -> Date.from(ld.atStartOfDay(ZoneId.of("UTC")).toInstant())).collect(Collectors.toList()));
        unmodifiableFieldsDocument.put("lop", entity.getSomeListOfPeriods().stream().map(Period::toString).collect(Collectors.toList()));
        unmodifiableFieldsDocument.put("lost", entity.getSomeListOfStringTypes().stream().map(SomeStringType::getValue).collect(Collectors.toList()));
        unmodifiableFieldsDocument.put("los", entity.getSomeListOfStrings());
        unmodifiableFieldsDocument.put("slt", entity.getSomeLongType().getValue());
        unmodifiableFieldsDocument.put("mosti", entity.getSomeMapOfStringToInteger());
        unmodifiableFieldsDocument.put("mosttst", entity.getSomeMapOfStringTypeToStringType());
        unmodifiableFieldsDocument.put("snns", entity.getSomeNonNullableString());
        entity.getSomeOptionalBoolean().ifPresent(someOptionalBoolean -> unmodifiableFieldsDocument.put("sob", someOptionalBoolean));
        entity.getSomeOptionalBooleanType().ifPresent(someOptionalBooleanType -> unmodifiableFieldsDocument.put("sobtyp", someOptionalBooleanType.getValue()));
        entity.getSomeOptionalInstant().ifPresent(someOptionalInstant -> unmodifiableFieldsDocument.put("soi", Date.from(someOptionalInstant)));
        entity.getSomeOptionalIntType().ifPresent(someOptionalIntType -> unmodifiableFieldsDocument.put("soityp", someOptionalIntType.getValue()));
        entity.getSomeOptionalLongType().ifPresent(someOptionalLongType -> unmodifiableFieldsDocument.put("soltyp", someOptionalLongType.getValue()));
        entity.getSomeOptionalPeriod().ifPresent(someOptionalPeriod -> unmodifiableFieldsDocument.put("sop", someOptionalPeriod.toString()));
        entity.getSomeOptionalProvidedBooleanType().ifPresent(someOptionalProvidedBooleanType -> unmodifiableFieldsDocument.put("sopbtyp", someOptionalProvidedBooleanType.getValue()));
        entity.getSomeOptionalProvidedIntType().ifPresent(someOptionalProvidedIntType -> unmodifiableFieldsDocument.put("sopityp", someOptionalProvidedIntType.getValue()));
        entity.getSomeOptionalProvidedLongType().ifPresent(someOptionalProvidedLongType -> unmodifiableFieldsDocument.put("sopltyp", someOptionalProvidedLongType.getValue()));
        entity.getSomeOptionalProvidedStringType().ifPresent(someOptionalProvidedStringType -> unmodifiableFieldsDocument.put("sopstyp", someOptionalProvidedStringType.getValue()));
        entity.getSomeOptionalStatus().ifPresent(someOptionalStatus -> unmodifiableFieldsDocument.put("sost", someOptionalStatus.name()));
        entity.getSomeOptionalString().ifPresent(someOptionalString -> unmodifiableFieldsDocument.put("sos", someOptionalString));
        entity.getSomeOptionalStringType().ifPresent(someOptionalStringType -> unmodifiableFieldsDocument.put("sostyp", someOptionalStringType.getValue()));
        unmodifiableFieldsDocument.put("spbt", entity.getSomeProvidedBooleanType().getValue());
        unmodifiableFieldsDocument.put("spit", entity.getSomeProvidedIntType().getValue());
        unmodifiableFieldsDocument.put("splt", entity.getSomeProvidedLongType().getValue());
        unmodifiableFieldsDocument.put("spst", entity.getSomeProvidedStringType().getValue());
        unmodifiableFieldsDocument.put("ss", entity.getSomeStatus().name());
        unmodifiableFieldsDocument.put("sst", entity.getSomeStringType().getValue());

        return new Document()
                .append("$setOnInsert", unmodifiableFieldsDocument)
                .append("$set", modifiableFieldsDocument);

    }


    @Override
    protected SimpleEntity toEntityFrom(final Document document) {

        final Instant createdTimestampUtc = readInstant("c-ts", "createdTimestampUtc", document);
        final ObjectId id = readObjectId("_id", "id", document);
        final Optional<Instant> lastModifiedTimestampUtc = readInstantOptional("lm-ts", document);
        final boolean someBoolean = readBoolean("sb", "someBoolean", document);
        final SomeBooleanType someBooleanType = readBoolean(SomeBooleanType::new, "sbt", "someBooleanType", document);
        final SomeIntType someIntType = readInt(SomeIntType::new, "sit", "someIntType", document);
        final List<SomeStatus> someListOfEnums = readEnumList(SomeStatus.class, "lostat", "someListOfEnums", document);
        final List<Instant> someListOfInstants = readInstantList("loi", "someListOfInstants", document);
        final List<LocalDate> someListOfLocalDates = readLocalDateList("lold", "someListOfLocalDates", document);
        final List<Period> someListOfPeriods = readPeriodList("lop", "someListOfPeriods", document);
        final List<SomeStringType> someListOfStringTypes = readList(SomeStringType::new, "lost", "someListOfStringTypes", document);
        final List<String> someListOfStrings = readStringList("los", "someListOfStrings", document);
        final SomeLongType someLongType = readLong(SomeLongType::new, "slt", "someLongType", document);
        final Map<String, Integer> someMapOfStringToInteger = readMap(key -> key, value -> (Integer) value, "mosti", "someMapOfStringToInteger", document);
        final Map<SomeStringType, SomeStringType> someMapOfStringTypeToStringType = readMap(SomeStringType::new, value -> (SomeStringType) value, "mosttst", "someMapOfStringTypeToStringType", document);
        final Instant someModifiableInstant = readInstant("smi", "someModifiableInstant", document);
        final int someModifiableInt = readInt("smint", "someModifiableInt", document);
        final LocalDate someModifiableLocalDate = readLocalDate("smld", "someModifiableLocalDate", document);
        final Period someModifiablePeriod = readPeriod("smp", "someModifiablePeriod", document);
        final String someModifiableString = readString("sms", "someModifiableString", document);
        final String someNonNullableString = readString("snns", "someNonNullableString", document);
        final Optional<Boolean> someOptionalBoolean = readBooleanOptional("sob", document);
        final Optional<SomeBooleanType> someOptionalBooleanType = readBooleanOptional(SomeBooleanType::new, "sobtyp", document);
        final Optional<Instant> someOptionalInstant = readInstantOptional("soi", document);
        final OptionalInt someOptionalInt = readIntOptional("soint", document);
        final Optional<SomeIntType> someOptionalIntType = readIntOptional(SomeIntType::new, "soityp", document);
        final Optional<SomeLongType> someOptionalLongType = readLongOptional(SomeLongType::new, "soltyp", document);
        final Optional<Instant> someOptionalModifiableInstant = readInstantOptional("somi", document);
        final Optional<Period> someOptionalPeriod = readPeriodOptional("sop", document);
        final Optional<SomeProvidedBooleanType> someOptionalProvidedBooleanType = readBooleanOptional(SomeProvidedBooleanType::new, "sopbtyp", document);
        final Optional<SomeProvidedIntType> someOptionalProvidedIntType = readIntOptional(SomeProvidedIntType::new, "sopityp", document);
        final Optional<SomeProvidedLongType> someOptionalProvidedLongType = readLongOptional(SomeProvidedLongType::new, "sopltyp", document);
        final Optional<SomeProvidedStringType> someOptionalProvidedStringType = readStringOptional(SomeProvidedStringType::new, "sopstyp", document);
        final Optional<SomeStatus> someOptionalStatus = readEnumOptional(SomeStatus.class, "sost", "someOptionalStatus", document);
        final Optional<String> someOptionalString = readStringOptional("sos", document);
        final Optional<SomeStringType> someOptionalStringType = readStringOptional(SomeStringType::new, "sostyp", document);
        final SomeProvidedBooleanType someProvidedBooleanType = readBoolean(SomeProvidedBooleanType::new, "spbt", "someProvidedBooleanType", document);
        final SomeProvidedIntType someProvidedIntType = readInt(SomeProvidedIntType::new, "spit", "someProvidedIntType", document);
        final SomeProvidedLongType someProvidedLongType = readLong(SomeProvidedLongType::new, "splt", "someProvidedLongType", document);
        final SomeProvidedStringType someProvidedStringType = readString(SomeProvidedStringType::new, "spst", "someProvidedStringType", document);
        final SomeStatus someStatus = readEnum(SomeStatus.class, "ss", "someStatus", document);
        final SomeStringType someStringType = readString(SomeStringType::new, "sst", "someStringType", document);

        return new SimpleEntity(
                createdTimestampUtc,
                id,
                lastModifiedTimestampUtc,
                someBoolean,
                someBooleanType,
                someIntType,
                someListOfEnums,
                someListOfInstants,
                someListOfLocalDates,
                someListOfPeriods,
                someListOfStringTypes,
                someListOfStrings,
                someLongType,
                someMapOfStringToInteger,
                someMapOfStringTypeToStringType,
                someModifiableInstant,
                someModifiableInt,
                someModifiableLocalDate,
                someModifiablePeriod,
                someModifiableString,
                someNonNullableString,
                someOptionalBoolean,
                someOptionalBooleanType,
                someOptionalInstant,
                someOptionalInt,
                someOptionalIntType,
                someOptionalLongType,
                someOptionalModifiableInstant,
                someOptionalPeriod,
                someOptionalProvidedBooleanType,
                someOptionalProvidedIntType,
                someOptionalProvidedLongType,
                someOptionalProvidedStringType,
                someOptionalStatus,
                someOptionalString,
                someOptionalStringType,
                someProvidedBooleanType,
                someProvidedIntType,
                someProvidedLongType,
                someProvidedStringType,
                someStatus,
                someStringType);

    }


    public Optional<SimpleEntity> findOneOptionalBySomeBooleanType(final SomeBooleanType someBooleanType) {

        final Document query = new Document();
        query.put("sbt", someBooleanType.getValue());
        return findOneOptional(query);

    }


    public SimpleEntity findOneBySomeBooleanType(final SomeBooleanType someBooleanType) {

        final Document query = new Document();
        query.put("sbt", someBooleanType.getValue());
        return findOne(query);

    }


    public Optional<SimpleEntity> findOneOptionalBySomeIntType(final SomeIntType someIntType) {

        final Document query = new Document();
        query.put("sit", someIntType.getValue());
        return findOneOptional(query);

    }


    public SimpleEntity findOneBySomeIntType(final SomeIntType someIntType) {

        final Document query = new Document();
        query.put("sit", someIntType.getValue());
        return findOne(query);

    }


    public Optional<SimpleEntity> findOneOptionalBySomeLongType(final SomeLongType someLongType) {

        final Document query = new Document();
        query.put("slt", someLongType.getValue());
        return findOneOptional(query);

    }


    public SimpleEntity findOneBySomeLongType(final SomeLongType someLongType) {

        final Document query = new Document();
        query.put("slt", someLongType.getValue());
        return findOne(query);

    }


    public Optional<SimpleEntity> findOneOptionalBySomeNonNullableString(final String someNonNullableString) {

        final Document query = new Document();
        query.put("snns", someNonNullableString);
        return findOneOptional(query);

    }


    public SimpleEntity findOneBySomeNonNullableString(final String someNonNullableString) {

        final Document query = new Document();
        query.put("snns", someNonNullableString);
        return findOne(query);

    }


    public Optional<SimpleEntity> findOneOptionalBySomeOptionalString(final String someOptionalString) {

        final Document query = new Document();
        query.put("sos", someOptionalString);
        return findOneOptional(query);

    }


    public SimpleEntity findOneBySomeOptionalString(final String someOptionalString) {

        final Document query = new Document();
        query.put("sos", someOptionalString);
        return findOne(query);

    }


    public Optional<SimpleEntity> findOneOptionalBySomeStringType(final SomeStringType someStringType) {

        final Document query = new Document();
        query.put("sst", someStringType.getValue());
        return findOneOptional(query);

    }


    public SimpleEntity findOneBySomeStringType(final SomeStringType someStringType) {

        final Document query = new Document();
        query.put("sst", someStringType.getValue());
        return findOne(query);

    }


    public SimpleEntity upsertBySomeBooleanType(final SimpleEntity upsertEntity) {

        Objects.requireNonNull(upsertEntity, "upsertEntity");

        final Document filter = new Document();
        filter.put("sbt", upsertEntity.getSomeBooleanType().getValue());
        final Document update = toUpsertDocumentFrom(upsertEntity);
        final FindOneAndUpdateOptions options = new FindOneAndUpdateOptions().returnDocument(ReturnDocument.AFTER).upsert(true);
        return findOneAndUpdate(filter, update, options);

    }


    public SimpleEntity upsertBySomeIntType(final SimpleEntity upsertEntity) {

        Objects.requireNonNull(upsertEntity, "upsertEntity");

        final Document filter = new Document();
        filter.put("sit", upsertEntity.getSomeIntType().getValue());
        final Document update = toUpsertDocumentFrom(upsertEntity);
        final FindOneAndUpdateOptions options = new FindOneAndUpdateOptions().returnDocument(ReturnDocument.AFTER).upsert(true);
        return findOneAndUpdate(filter, update, options);

    }


    public SimpleEntity upsertBySomeLongType(final SimpleEntity upsertEntity) {

        Objects.requireNonNull(upsertEntity, "upsertEntity");

        final Document filter = new Document();
        filter.put("slt", upsertEntity.getSomeLongType().getValue());
        final Document update = toUpsertDocumentFrom(upsertEntity);
        final FindOneAndUpdateOptions options = new FindOneAndUpdateOptions().returnDocument(ReturnDocument.AFTER).upsert(true);
        return findOneAndUpdate(filter, update, options);

    }


    public SimpleEntity upsertBySomeNonNullableString(final SimpleEntity upsertEntity) {

        Objects.requireNonNull(upsertEntity, "upsertEntity");

        final Document filter = new Document();
        filter.put("snns", upsertEntity.getSomeNonNullableString());
        final Document update = toUpsertDocumentFrom(upsertEntity);
        final FindOneAndUpdateOptions options = new FindOneAndUpdateOptions().returnDocument(ReturnDocument.AFTER).upsert(true);
        return findOneAndUpdate(filter, update, options);

    }


    public SimpleEntity upsertBySomeOptionalString(final SimpleEntity upsertEntity) {

        Objects.requireNonNull(upsertEntity, "upsertEntity");

        final Document filter = new Document();
        upsertEntity.getSomeOptionalString().ifPresent(fieldValue -> filter.put("sos", fieldValue));
        final Document update = toUpsertDocumentFrom(upsertEntity);
        final FindOneAndUpdateOptions options = new FindOneAndUpdateOptions().returnDocument(ReturnDocument.AFTER).upsert(true);
        return findOneAndUpdate(filter, update, options);

    }


    public SimpleEntity upsertBySomeStringType(final SimpleEntity upsertEntity) {

        Objects.requireNonNull(upsertEntity, "upsertEntity");

        final Document filter = new Document();
        filter.put("sst", upsertEntity.getSomeStringType().getValue());
        final Document update = toUpsertDocumentFrom(upsertEntity);
        final FindOneAndUpdateOptions options = new FindOneAndUpdateOptions().returnDocument(ReturnDocument.AFTER).upsert(true);
        return findOneAndUpdate(filter, update, options);

    }


    public boolean existsBySomeBooleanType(final SomeBooleanType someBooleanType) {

        final Document query = new Document();
        query.append("sbt", someBooleanType.getValue());
        return exists(query);

    }


    public boolean existsBySomeIntType(final SomeIntType someIntType) {

        final Document query = new Document();
        query.append("sit", someIntType.getValue());
        return exists(query);

    }


    public boolean existsBySomeLongType(final SomeLongType someLongType) {

        final Document query = new Document();
        query.append("slt", someLongType.getValue());
        return exists(query);

    }


    public boolean existsBySomeNonNullableString(final String someNonNullableString) {

        final Document query = new Document();
        query.append("snns", someNonNullableString);
        return exists(query);

    }


    public boolean existsBySomeOptionalString(final String someOptionalString) {

        final Document query = new Document();
        query.append("sos", someOptionalString);
        return exists(query);

    }


    public boolean existsBySomeStringType(final SomeStringType someStringType) {

        final Document query = new Document();
        query.append("sst", someStringType.getValue());
        return exists(query);

    }


    public List<SimpleEntity> findBySomeNonNullableStringAndSomeBoolean(final String someNonNullableString, final boolean someBoolean) {

        final Document query = new Document();
        query.append("snns", someNonNullableString);
        query.append("sb", someBoolean);
        return find(query);

    }


    public boolean existsBySomeNonNullableStringAndSomeBoolean(final String someNonNullableString, final boolean someBoolean) {

        final Document query = new Document();
        query.append("snns", someNonNullableString);
        query.append("sb", someBoolean);
        return exists(query);

    }


    public long count(final SimpleEntityFilter filter) {

        final Bson bsonFilter = filter.toBson(this.fieldConverter);
        return super.count(bsonFilter);

    }


    public List<SimpleEntity> findAllBy(final SimpleEntityFilter filter) {

        final Bson bsonFilter = filter.toBson(this.fieldConverter);
        return super.find(bsonFilter);

    }


    public Page<SimpleEntity> findAll(final Pageable pageable) {

        return super.find(pageable);

    }


    public Page<SimpleEntity> findAllBy(final SimpleEntityFilter filter, final Pageable pageable) {

        final Bson bsonFilter = filter.toBson(this.fieldConverter);
        return super.find(bsonFilter, pageable);

    }


    public void setFields(final SimpleEntityUpdater updater) {

        final Bson bson = updater.toBson(this.fieldConverter);
        super.updateOneById(updater.getId(), bson);

    }


    protected final String convertClassFieldNameToCollectionFieldName(final String classFieldName) {

        switch(classFieldName) {
            case "createdTimestampUtc":
                return "c-ts";
            case "id":
                return "_id";
            case "lastModifiedTimestampUtc":
                return "lm-ts";
            case "someBoolean":
                return "sb";
            case "someBooleanType":
                return "sbt";
            case "someIntType":
                return "sit";
            case "someListOfEnums":
                return "lostat";
            case "someListOfInstants":
                return "loi";
            case "someListOfLocalDates":
                return "lold";
            case "someListOfPeriods":
                return "lop";
            case "someListOfStringTypes":
                return "lost";
            case "someListOfStrings":
                return "los";
            case "someLongType":
                return "slt";
            case "someMapOfStringToInteger":
                return "mosti";
            case "someMapOfStringTypeToStringType":
                return "mosttst";
            case "someModifiableInstant":
                return "smi";
            case "someModifiableInt":
                return "smint";
            case "someModifiableLocalDate":
                return "smld";
            case "someModifiablePeriod":
                return "smp";
            case "someModifiableString":
                return "sms";
            case "someNonNullableString":
                return "snns";
            case "someOptionalBoolean":
                return "sob";
            case "someOptionalBooleanType":
                return "sobtyp";
            case "someOptionalInstant":
                return "soi";
            case "someOptionalInt":
                return "soint";
            case "someOptionalIntType":
                return "soityp";
            case "someOptionalLongType":
                return "soltyp";
            case "someOptionalModifiableInstant":
                return "somi";
            case "someOptionalPeriod":
                return "sop";
            case "someOptionalProvidedBooleanType":
                return "sopbtyp";
            case "someOptionalProvidedIntType":
                return "sopityp";
            case "someOptionalProvidedLongType":
                return "sopltyp";
            case "someOptionalProvidedStringType":
                return "sopstyp";
            case "someOptionalStatus":
                return "sost";
            case "someOptionalString":
                return "sos";
            case "someOptionalStringType":
                return "sostyp";
            case "someProvidedBooleanType":
                return "spbt";
            case "someProvidedIntType":
                return "spit";
            case "someProvidedLongType":
                return "splt";
            case "someProvidedStringType":
                return "spst";
            case "someStatus":
                return "ss";
            case "someStringType":
                return "sst";
            default:
                throw new IllegalArgumentException("Unknown classFieldName [" + classFieldName + "]");
        }

    }


    protected final Optional<String> getTypeDiscriminator() {

        return Optional.empty();

    }


}
